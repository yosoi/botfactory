type Bot
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, provider: iam }
    ]
  )
  @key(
    name: "ByInstanceId"
    fields: ["instanceId"]
    queryField: "botsByInstanceId"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  name: String!
  token: ID!
  instanceId: ID!
  instanceState: InstanceState! @function(name: "resolveField-${env}")
  prefix: String!
}

input CreateBotInput {
  token: ID!
}

input DeleteBotInput {
  id: ID!
}

enum InstanceState {
  PENDING
  RUNNING
  SHUTTING_DOWN
  TERMINATED
  STOPPING
  STOPPED
}

input ModelBotConditionInput {
  and: [ModelBotConditionInput]
  or: [ModelBotConditionInput]
  not: ModelBotConditionInput
}

type Mutation {
  createBot(input: CreateBotInput!, condition: ModelBotConditionInput): Bot
  deleteBot(input: DeleteBotInput!, condition: ModelBotConditionInput): Bot
}

type Subscription {
  onCreateBot(id: ID): Bot @aws_subscribe(mutations: ["createBot"])
  onDeleteBot(id: ID): Bot @aws_subscribe(mutations: ["deleteBot"])
}
